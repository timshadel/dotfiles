#!/usr/bin/env bash

function round() {
  printf %.0f $1
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`...";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}...";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Move file to the Trash instead of deleting it.
# If an identically named file exists in the Trash, a timestamp is added to this file's name.
function trash() {
  while [ -n "$1" ]; do
    if [ ! -e "$1" ]; then
      echo "'$1' not found; exiting"
      return
    fi

    local file=`basename -- "$1"`

    # Chop trailing '/' if there
    file=${file%/}

    local destination=''

    if [ -e "$HOME/.Trash/$file" ]; then
      # Extract file and extension
      local ext=`expr "$file" : ".*\(\.[^\.]*\)$"`
      local base=${file%$ext}

      # Add a space between base and timestamp
      test -n "$base" && base="$base "

      destination="/$base`date +%Y-%m-%d`_$RANDOM$ext"
    fi

    echo "Trashing '$1' to '$HOME/.Trash$destination'"
    \mv -i -- "$1" "$HOME/.Trash$destination" || return
    shift
  done
  `afplay /System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/dock/drag\ to\ trash.aif`
}

# Create a pretty secure, random key
# Use `getakey 2>/dev/null` to have a quiet version
function getakey() {
  echo "Your key is on the clipboard."
  head /dev/urandom | shasum -a 256 | sed -e "s/ .*//" | tee >(pbcopy)
}

# Find the remote URL for the current branch of the current repository
function remote_giturl() {
	local my_remote=`git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD 2>/dev/null) 2>/dev/null | sed -e "s/\(.*\)\/.*/\1/"`
	if [[ -n $my_remote ]]; then
		git config --get remote.$my_remote.url
	fi
}

function mkrepo() {
	git init 2>/dev/null
	local currentDir="$(basename $PWD)"
	local upDir="$(basename $(greadlink -f "$PWD/.."))"
	local upUpDir="$(basename $(greadlink -f "$PWD/../.."))"
	local repoName=$currentDir
	if [ "$upUpDir" == "projects" ]; then
		repoName="$upDir-$currentDir"
	fi

	local repoUrl=`aws codecommit create-repository --repository-name $repoName | jq -r .repositoryMetadata.cloneUrlHttp`
	if [ -z "$repoUrl" ]; then
		echo "Problem creating repo $repoName."
		exit 1
	fi
	git remote add origin $repoUrl
	git push origin --all
}

# Get password from OS X Keychain function
# See `man security` for more info
function get_pw() {
	local url=$(remote_giturl)
	if [[ -z $url ]]; then
	  security find-generic-password -wa "$1"
	else
		local host=${url#*://}
		local path=/${host#*/}
		host=${host%%/*}
		local file=$(relpath `git rev-parse --show-toplevel` $1)
		security find-internet-password -w -s $host -p $path -a $file 2>/dev/null | tee >(pbcopy)
	fi
}

function set_pw() {
	local url=$(remote_giturl)
	local pass=$(getakey)
	if [[ -z $url ]]; then
	  security add-generic-password -a "$1" -w $pass -s $PWD -U -j "Created using set_pw in $PWD"
	  echo "New password set for $PWD $1:$pass"
	else
		local host=${url#*://}
		local path=/${host#*/}
		host=${host%%/*}
		local repo=${path##*/}
		repo=${repo%%.*}
		local file=$(relpath `git rev-parse --show-toplevel` $1)
		security add-internet-password -s $host -p $path -a $file -w $pass -U -l "Console: $repo/$file" -j "Created using set_pw in $PWD" 2>/dev/null
	  echo "New password set for $repo/$file — $pass"
	fi
	echo $pass | pbcopy
}

function del_pw() {
	local url=$(remote_giturl)
	if [[ -z $url ]]; then
	  security delete-generic-password -a "$1" -s $PWD
	  echo "Deleted password for $PWD $1"
	else
		local host=${url#*://}
		local path=/${host#*/}
		host=${host%%/*}
		local file=$(relpath `git rev-parse --show-toplevel` $1)
		security delete-internet-password -s $host -p $path -a $file
	  echo "Deleted password for $1"
	fi
}

function relpath() {
	node -p 'var p=require("path");p.relative(p.resolve(process.argv[1]),p.resolve(process.argv[2]))' $1 $2
}

function pushcert() {
  local pass=$(get_pw "$1.key")
  if [[ -z $pass ]]; then
    pass=$(set_pw "$1.key")
  fi
  $(openssl genrsa -aes256 -passout pass:$pass -out "$1.key" 2048)
  $(openssl req -new -key "$1.key" -out "$1.csr" -passin pass:$pass)
}

function pushpem() {
  openssl x509 -in "$1.cer" -inform DER -outform PEM -out "$1.crt"
}

function tsd() {
  TZ=$ date -r $(round $1)
}

# `p` with no arguments moves to the projects directory, any other arguments
# open subdirectories inside the projects
function p() {
  if [ $# -eq 0 ]; then
    cd ~/projects;
  else
    cd ~/projects/$@;
  fi;
}

# `c` with no arguments opens the current directory in VS Code, otherwise
# opens the given location
function c() {
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
