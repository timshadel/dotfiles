#!/bin/bash

###
# bak: Archive files, directories, and repositories.
#
# How it works:
# 1. Look at the last modified time for the file.
# 2. Select the archive directory from the command line or config.
# 3. Zip contents of each file to `$archive_dir/$mdate $name.zip`.
# 4. Move original file to `~/.Trash/$name.ext`
###


# Send status using stderr
status() { >&2 echo $1; }

# Import trash()
source ~/.functions

# TODO: think about making this configured
archive_dir="/Users/timshadel/Dropbox/Tim/Archive"

# Main loop
for filepath in "$@"
do
    if [ ! -e $filepath ]; then
      status "'$filepath' not found."
      continue
    fi
    seconds=`stat -f "%m" $filepath`
    stamp=`date -j -r $seconds +'%Y-%m-%d'`
    filename=$(basename "$filepath")

    if [ -d $filepath ]; then
        gitpath="$filepath/.git"
        name="${filename%.*}"

        # Check if we're in a project structure
        upDir="$(basename $(greadlink -f "$filepath/.."))"
        upUpDir="$(basename $(greadlink -f "$filepath/../.."))"
        if [ "$upUpDir" == "projects" ]; then
          name="$upDir-$name"
        fi

        if [ -e $gitpath ]; then
          status "'$filepath' contains a .git directory. Exporting bundle."
          dir=$PWD
          cd $filepath
          if [[ -n $(git status --porcelain 2> /dev/null | tail -n1) ]]; then
            status "error: The git working directory is dirty. bak requires clean repos."
            cd $dir
            exit 1
          else
            cd $dir

            bundlename="$name.git.bundle"
            git --git-dir=$gitpath bundle create "$bundlename" --all

            # Trash the uncompressed, original directory
            trash $filepath || exit -1
            filepath=$bundlename
          fi
        else
          zipname="$name.zip"
          status "Zipping '$filepath' to '$zipname'"
          zip -ro "$zipname" "$filepath"

          # Trash the uncompressed, original directory
          trash $filepath || exit -1
          filepath=$zipname
        fi

        # Archive should keep original creation date
        touchtime=`date -j -r $seconds +'%Y%m%d%H%M.%S'`
        touch -t $touchtime "$filepath"

        filename=$(basename "$filepath")
    fi

    destination="${archive_dir}/${stamp} $filename"
    if [ -e "$destination" ]; then
        extrastamp=`date -j -r $seconds +'%Y-%m-%d %H_%M_%S'`
        destination="${archive_dir}/${extrastamp} ${RANDOM} $filename"
    fi

    status "Moving '$filepath' to '$destination'"
    mv "$filepath" "$destination"
done
